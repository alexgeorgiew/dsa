#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <queue>
using namespace std;

class Point
{
    public:
    Point()
    {
        this->x=0;
        this->y=0;
    }
    int x,y;
    int t=0;
};
int rows,cols;
int result=0;
int i=0;




int main() {
    cin>>rows;
    cin>>cols;
  
    int time,k;
    cin>>time;
    cin>>k;
    unordered_map<int,int> visited;
    unordered_map<int,int> allvisited;
    queue<Point> q;
   
    
   /* if(k==2)
    {
        while(true){};
    }*/
    for(int i=0;i<k;i++)
    {
        int a1,a2;
        cin>>a1;
        cin>>a2;
        
       
        Point p;
        p.x=rows-a1;
        p.y=a2-1;
        p.t=time;
        q.push(p);
        visited[p.x+p.y*cols]=1;
        allvisited[p.x+p.y*cols]=1;
        while(!q.empty())
        {
            Point cur=q.front();
            result++;
            q.pop();
            //cout<<cur.x<<" "<<cur.y<<'\n';
             Point f1;
            if(cur.x>0 && cur.t>0 && visited.find(cur.x-1+cur.y*cols)==visited.end()) 
            {
                f1.x=cur.x-1;
                f1.y=cur.y;
                f1.t=cur.t-1;
                q.push(f1);
                visited[f1.x+f1.y*cols]=1;
                allvisited[f1.x+f1.y*cols]=1;
            }
            if(cur.x+1<rows && cur.t>0 && visited.find(cur.x+1+cur.y*cols)==visited.end()) 
            {   
                f1.x=cur.x+1;
                f1.y=cur.y;
                f1.t=cur.t-1;
                q.push(f1);
                 visited[f1.x+f1.y*cols]=1;
                allvisited[f1.x+f1.y*cols]=1;
            }
             if(cur.y+1<cols && cur.t>0 && visited.find(cur.x+(cur.y+1)*cols)==visited.end()) 
            {  
                f1.x=cur.x;
                f1.y=cur.y+1;
                f1.t=cur.t-1;
                 q.push(f1);
                  visited[f1.x+f1.y*cols]=1;
                 allvisited[f1.x+f1.y*cols]=1;
            }
            if(cur.y>0 && cur.t>0 && visited.find(cur.x+(cur.y-1)*cols)==visited.end())  
            {
                f1.x=cur.x;
                f1.y=cur.y-1;
                f1.t=cur.t-1;
                 q.push(f1);
                 visited[f1.x+f1.y*cols]=1;
                allvisited[f1.x+f1.y*cols]=1;
            }
        }
        visited.clear();
        
    }
    cout<<rows*cols-allvisited.size();  
    return 0;
}
